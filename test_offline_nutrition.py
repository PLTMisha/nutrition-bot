#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –æ—Ñ–ª–∞–π–Ω –±–∞–∑—ã –ø–∏—Ç–∞–Ω–∏—è
"""

def _get_basic_nutrition_estimate(product_name: str, quantity: float) -> dict:
    """Get basic nutrition estimates for common foods when API is unavailable"""
    product_name_lower = product_name.lower()
    
    # Basic nutrition database (per 100g)
    basic_foods = {
        # Fruits
        '—è–±–ª–æ–∫–æ': {'calories': 52, 'proteins': 0.3, 'fats': 0.2, 'carbs': 14},
        'apple': {'calories': 52, 'proteins': 0.3, 'fats': 0.2, 'carbs': 14},
        '–±–∞–Ω–∞–Ω': {'calories': 89, 'proteins': 1.1, 'fats': 0.3, 'carbs': 23},
        'banana': {'calories': 89, 'proteins': 1.1, 'fats': 0.3, 'carbs': 23},
        '–∞–ø–µ–ª—å—Å–∏–Ω': {'calories': 47, 'proteins': 0.9, 'fats': 0.1, 'carbs': 12},
        'orange': {'calories': 47, 'proteins': 0.9, 'fats': 0.1, 'carbs': 12},
        
        # Vegetables
        '–ø–æ–º–∏–¥–æ—Ä': {'calories': 18, 'proteins': 0.9, 'fats': 0.2, 'carbs': 3.9},
        'tomato': {'calories': 18, 'proteins': 0.9, 'fats': 0.2, 'carbs': 3.9},
        '–æ–≥—É—Ä–µ—Ü': {'calories': 16, 'proteins': 0.7, 'fats': 0.1, 'carbs': 4.1},
        'cucumber': {'calories': 16, 'proteins': 0.7, 'fats': 0.1, 'carbs': 4.1},
        '–º–æ—Ä–∫–æ–≤—å': {'calories': 41, 'proteins': 0.9, 'fats': 0.2, 'carbs': 10},
        'carrot': {'calories': 41, 'proteins': 0.9, 'fats': 0.2, 'carbs': 10},
        
        # Grains
        '—Ä–∏—Å': {'calories': 130, 'proteins': 2.7, 'fats': 0.3, 'carbs': 28},
        'rice': {'calories': 130, 'proteins': 2.7, 'fats': 0.3, 'carbs': 28},
        '–≥—Ä–µ—á–∫–∞': {'calories': 343, 'proteins': 13.3, 'fats': 3.4, 'carbs': 62},
        'buckwheat': {'calories': 343, 'proteins': 13.3, 'fats': 3.4, 'carbs': 62},
        '—Ö–ª–µ–±': {'calories': 265, 'proteins': 9, 'fats': 3.2, 'carbs': 49},
        'bread': {'calories': 265, 'proteins': 9, 'fats': 3.2, 'carbs': 49},
        
        # Proteins
        '–∫—É—Ä–∏—Ü–∞': {'calories': 165, 'proteins': 31, 'fats': 3.6, 'carbs': 0},
        'chicken': {'calories': 165, 'proteins': 31, 'fats': 3.6, 'carbs': 0},
        '–≥–æ–≤—è–¥–∏–Ω–∞': {'calories': 250, 'proteins': 26, 'fats': 15, 'carbs': 0},
        'beef': {'calories': 250, 'proteins': 26, 'fats': 15, 'carbs': 0},
        '—è–π—Ü–æ': {'calories': 155, 'proteins': 13, 'fats': 11, 'carbs': 1.1},
        'egg': {'calories': 155, 'proteins': 13, 'fats': 11, 'carbs': 1.1},
        
        # Dairy
        '–º–æ–ª–æ–∫–æ': {'calories': 42, 'proteins': 3.4, 'fats': 1, 'carbs': 5},
        'milk': {'calories': 42, 'proteins': 3.4, 'fats': 1, 'carbs': 5},
        '—Ç–≤–æ—Ä–æ–≥': {'calories': 103, 'proteins': 18, 'fats': 0.6, 'carbs': 3.3},
        'cottage cheese': {'calories': 103, 'proteins': 18, 'fats': 0.6, 'carbs': 3.3},
        '—Å—ã—Ä': {'calories': 402, 'proteins': 25, 'fats': 33, 'carbs': 0.3},
        'cheese': {'calories': 402, 'proteins': 25, 'fats': 33, 'carbs': 0.3},
    }
    
    # Try exact match first
    if product_name_lower in basic_foods:
        nutrition = basic_foods[product_name_lower]
        return {
            'name': product_name.title(),
            'calories_per_100g': nutrition['calories'],
            'proteins_per_100g': nutrition['proteins'],
            'fats_per_100g': nutrition['fats'],
            'carbs_per_100g': nutrition['carbs']
        }
    
    # Try partial match
    for food_name, nutrition in basic_foods.items():
        if food_name in product_name_lower or product_name_lower in food_name:
            return {
                'name': product_name.title(),
                'calories_per_100g': nutrition['calories'],
                'proteins_per_100g': nutrition['proteins'],
                'fats_per_100g': nutrition['fats'],
                'carbs_per_100g': nutrition['carbs']
            }
    
    # Default fallback for unknown products
    return {
        'name': product_name.title(),
        'calories_per_100g': 100,  # Average estimate
        'proteins_per_100g': 5,
        'fats_per_100g': 3,
        'carbs_per_100g': 15
    }

def main():
    """–¢–µ—Å—Ç –æ—Ñ–ª–∞–π–Ω –±–∞–∑—ã –ø–∏—Ç–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç –æ—Ñ–ª–∞–π–Ω –±–∞–∑—ã –ø–∏—Ç–∞–Ω–∏—è")
    print("=" * 40)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    test_cases = [
        ('—è–±–ª–æ–∫–æ', 150),
        ('–∫—É—Ä–∏—Ü–∞', 200),
        ('—Ä–∏—Å', 80),
        ('apple', 100),
        ('chicken', 150),
        ('–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç', 100),
        ('unknown food', 100)
    ]
    
    for product, quantity in test_cases:
        result = _get_basic_nutrition_estimate(product, quantity)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ë–ñ–£ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        calories = result['calories_per_100g'] * quantity / 100
        proteins = result['proteins_per_100g'] * quantity / 100
        fats = result['fats_per_100g'] * quantity / 100
        carbs = result['carbs_per_100g'] * quantity / 100
        
        print(f"\nüçΩÔ∏è {result['name']} ({quantity}–≥):")
        print(f"   –ö–∞–ª–æ—Ä–∏–∏: {calories:.1f} –∫–∫–∞–ª")
        print(f"   –ë–µ–ª–∫–∏: {proteins:.1f}–≥")
        print(f"   –ñ–∏—Ä—ã: {fats:.1f}–≥")
        print(f"   –£–≥–ª–µ–≤–æ–¥—ã: {carbs:.1f}–≥")
    
    print("\n‚úÖ –û—Ñ–ª–∞–π–Ω –±–∞–∑–∞ –ø–∏—Ç–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    print("‚úÖ Fallback –º–µ—Ö–∞–Ω–∏–∑–º –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")

if __name__ == "__main__":
    main()
