#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ fallback –¥–ª—è Nutrition Bot
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–Ω–µ—à–Ω–∏—Ö API
"""
import asyncio
import aiohttp
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_bot_webhook():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhook –±–æ—Ç–∞"""
    try:
        # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π URL Railway
        webhook_url = "https://nutrition-bot-production.up.railway.app/webhook"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(webhook_url.replace('/webhook', '/health')) as response:
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"‚úÖ Bot health check: {data}")
                    return True
                else:
                    logger.error(f"‚ùå Bot health check failed: {response.status}")
                    return False
    except Exception as e:
        logger.error(f"‚ùå Bot webhook test failed: {e}")
        return False

async def test_openfoodfacts_api():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ OpenFoodFacts API"""
    try:
        url = "https://world.openfoodfacts.org/api/v0/product/3017620422003.json"
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as response:
                if response.status == 200:
                    logger.info("‚úÖ OpenFoodFacts API –¥–æ—Å—Ç—É–ø–µ–Ω")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è OpenFoodFacts API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}")
                    return False
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è OpenFoodFacts API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

async def test_vercel_api():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Vercel API"""
    try:
        # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π URL Vercel
        health_url = "https://your-vercel-app.vercel.app/api/health"
        async with aiohttp.ClientSession() as session:
            async with session.get(health_url, timeout=10) as response:
                if response.status == 200:
                    logger.info("‚úÖ Vercel API –¥–æ—Å—Ç—É–ø–µ–Ω")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è Vercel API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}")
                    return False
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Vercel API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False

def test_offline_nutrition_database():
    """–¢–µ—Å—Ç –æ—Ñ–ª–∞–π–Ω –±–∞–∑—ã –ø–∏—Ç–∞–Ω–∏—è"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é fallback –∏–∑ handlers
        import sys
        import os
        sys.path.append(os.path.dirname(__file__))
        
        from handlers.food_search import _get_basic_nutrition_estimate
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        test_products = ['—è–±–ª–æ–∫–æ', '–∫—É—Ä–∏—Ü–∞', '—Ä–∏—Å', 'unknown_product']
        
        for product in test_products:
            result = _get_basic_nutrition_estimate(product, 100)
            if result:
                logger.info(f"‚úÖ Fallback –¥–ª—è '{product}': {result['calories_per_100g']} –∫–∫–∞–ª")
            else:
                logger.warning(f"‚ö†Ô∏è Fallback –¥–ª—è '{product}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –¢–µ—Å—Ç –æ—Ñ–ª–∞–π–Ω –±–∞–∑—ã –ø–∏—Ç–∞–Ω–∏—è failed: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ fallback Nutrition Bot")
    print("=" * 50)
    print(f"–í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    results = {}
    
    # –¢–µ—Å—Ç 1: –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞
    print("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞...")
    results['bot_available'] = await test_bot_webhook()
    
    # –¢–µ—Å—Ç 2: OpenFoodFacts API
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenFoodFacts API...")
    results['openfoodfacts_available'] = await test_openfoodfacts_api()
    
    # –¢–µ—Å—Ç 3: Vercel API
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Vercel API...")
    results['vercel_available'] = await test_vercel_api()
    
    # –¢–µ—Å—Ç 4: –û—Ñ–ª–∞–π–Ω –±–∞–∑–∞ –ø–∏—Ç–∞–Ω–∏—è
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ñ–ª–∞–π–Ω –±–∞–∑—ã –ø–∏—Ç–∞–Ω–∏—è...")
    results['offline_db_working'] = test_offline_nutrition_database()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 50)
    
    for test_name, result in results.items():
        status = "‚úÖ –†–ê–ë–û–¢–ê–ï–¢" if result else "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
        print(f"{test_name.replace('_', ' ').title()}: {status}")
    
    # –ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ fallback
    print("\nüîç –ê–ù–ê–õ–ò–ó –ì–û–¢–û–í–ù–û–°–¢–ò –ö FALLBACK:")
    if not results['openfoodfacts_available'] and results['offline_db_working']:
        print("‚úÖ Fallback –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    if not results['vercel_available']:
        print("‚úÖ Fallback –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    if results['bot_available']:
        print("‚úÖ –ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    else:
        print("‚ùå –ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ–ø–ª–æ–π –Ω–∞ Railway")
    
    print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if not results['bot_available']:
        print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è –Ω–∞ Railway")
        print("- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    if results['bot_available'] and (not results['openfoodfacts_available'] or not results['vercel_available']):
        print("- –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ fallback")
        print("- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        print("- –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—à–∏")

if __name__ == "__main__":
    asyncio.run(main())
