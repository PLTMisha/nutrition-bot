"""
Media handlers for the Nutrition Bot (photos, barcodes)
"""
import logging
from aiogram import Router, F
from aiogram.types import Message, PhotoSize
from aiogram.fsm.context import FSMContext

from services.database_service import DatabaseService
from services.vercel_api import VercelAPIService
from utils.keyboards import get_main_menu_keyboard
from utils.helpers import format_barcode_result

logger = logging.getLogger(__name__)

router = Router()


@router.message(F.photo)
async def handle_photo(message: Message, db_service: DatabaseService, state: FSMContext) -> None:
    """Handle photo messages (barcode scanning or food analysis)"""
    try:
        # Get the largest photo
        photo: PhotoSize = message.photo[-1]
        
        # Download photo
        bot = message.bot
        file_info = await bot.get_file(photo.file_id)
        photo_bytes = await bot.download_file(file_info.file_path)
        
        # Convert to base64
        import base64
        photo_base64 = base64.b64encode(photo_bytes.read()).decode('utf-8')
        
        # Send processing message
        processing_msg = await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        # Initialize Vercel API service
        vercel_api = VercelAPIService()
        
        # Try barcode detection first
        barcode_result = await vercel_api.process_barcode(photo_base64)
        
        if barcode_result and not barcode_result.get('error'):
            # Barcode found
            await processing_msg.delete()
            
            result_text = format_barcode_result(barcode_result)
            
            # If product found, save to database
            if barcode_result.get('found_in_database') and barcode_result.get('product'):
                user = await db_service.get_user_by_telegram_id(message.from_user.id)
                if user:
                    product = barcode_result['product']
                    # Ask for quantity
                    await message.answer(
                        f"{result_text}\n\n"
                        "üí° –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è"
                    )
                    return
            
            await message.answer(result_text, reply_markup=get_main_menu_keyboard())
            return
        
        # Try food photo analysis
        photo_result = await vercel_api.analyze_photo(
            photo_base64, 
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Ñ–æ—Ç–æ –µ–¥—ã –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –ø–æ—Ä—Ü–∏–∏"
        )
        
        await processing_msg.delete()
        
        if photo_result and not photo_result.get('error'):
            # Food analysis successful
            food_items = photo_result.get('food_items', [])
            reference_object = photo_result.get('reference_object', {})
            
            if food_items:
                result_text = "üçΩÔ∏è <b>–ê–Ω–∞–ª–∏–∑ –±–ª—é–¥–∞:</b>\n\n"
                
                total_calories = 0
                total_proteins = 0
                total_fats = 0
                total_carbs = 0
                
                for item in food_items:
                    name = item.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ')
                    weight = item.get('estimated_weight', 0)
                    nutrition = item.get('nutrition_estimate', {})
                    confidence = item.get('confidence', 0)
                    
                    calories = nutrition.get('calories', 0)
                    proteins = nutrition.get('proteins', 0)
                    fats = nutrition.get('fats', 0)
                    carbs = nutrition.get('carbs', 0)
                    
                    total_calories += calories
                    total_proteins += proteins
                    total_fats += fats
                    total_carbs += carbs
                    
                    result_text += (
                        f"‚Ä¢ <b>{name}</b>\n"
                        f"  ‚öñÔ∏è ~{weight:.0f}–≥ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence*100:.0f}%)\n"
                        f"  üî• {calories:.0f} –∫–∫–∞–ª | "
                        f"ü•© {proteins:.1f}–± | "
                        f"üßà {fats:.1f}–∂ | "
                        f"üçû {carbs:.1f}—É\n\n"
                    )
                
                # Reference object info
                if reference_object.get('name'):
                    result_text += f"üìè <b>–≠—Ç–∞–ª–æ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç:</b> {reference_object['name']}\n\n"
                
                # Total nutrition
                result_text += (
                    f"üìä <b>–ò—Ç–æ–≥–æ:</b>\n"
                    f"üî• {total_calories:.0f} –∫–∫–∞–ª\n"
                    f"ü•© –ë–µ–ª–∫–∏: {total_proteins:.1f}–≥\n"
                    f"üßà –ñ–∏—Ä—ã: {total_fats:.1f}–≥\n"
                    f"üçû –£–≥–ª–µ–≤–æ–¥—ã: {total_carbs:.1f}–≥\n\n"
                    f"üí° <i>–≠—Ç–æ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞. –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.</i>"
                )
                
                # Save to database
                user = await db_service.get_user_by_telegram_id(message.from_user.id)
                if user and food_items:
                    for item in food_items:
                        nutrition = item.get('nutrition_estimate', {})
                        await db_service.add_food_log(
                            user_id=user.id,
                            product_name=item.get('name', '–ë–ª—é–¥–æ —Å —Ñ–æ—Ç–æ'),
                            quantity_g=item.get('estimated_weight', 100),
                            calories=nutrition.get('calories', 0),
                            proteins=nutrition.get('proteins', 0),
                            fats=nutrition.get('fats', 0),
                            carbs=nutrition.get('carbs', 0),
                            source='photo'
                        )
                
                await message.answer(result_text, reply_markup=get_main_menu_keyboard())
            else:
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ–¥—É –Ω–∞ —Ñ–æ—Ç–æ.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "‚Ä¢ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –±–æ–ª–µ–µ —á–µ—Ç–∫–∏–º\n"
                    "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç (–º–æ–Ω–µ—Ç–∞, –ª–æ–∂–∫–∞)\n"
                    "‚Ä¢ –£–ª—É—á—à–∏—Ç—å –æ—Å–≤–µ—â–µ–Ω–∏–µ",
                    reply_markup=get_main_menu_keyboard()
                )
        else:
            # Both analyses failed
            error_msg = photo_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if photo_result else '–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            await message.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n\n"
                f"–û—à–∏–±–∫–∞: {error_msg}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –°–¥–µ–ª–∞—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
                "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ",
                reply_markup=get_main_menu_keyboard()
            )
        
    except Exception as e:
        logger.error(f"Error processing photo: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ",
            reply_markup=get_main_menu_keyboard()
        )


def register_media_handlers(dp: Router) -> None:
    """Register media handlers"""
    dp.include_router(router)
