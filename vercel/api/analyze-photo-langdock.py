import os
import json
import base64
import requests
from http.server import BaseHTTPRequestHandler

class handler(BaseHTTPRequestHandler):
    def do_POST(self):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_data = data.get('image')
            if not image_data:
                self.send_error(400, "No image data provided")
                return
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Langdock
            api_key = os.environ.get('LANGDOCK_API_KEY')
            if not api_key:
                self.send_error(500, "Langdock API key not configured")
                return
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Langdock
            headers = {
                'Authorization': f'Bearer {api_key}',
                'Content-Type': 'application/json'
            }
            
            payload = {
                "model": "gpt-4-vision-preview",
                "messages": [
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "text",
                                "text": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–¥—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏, –∫–∞–ª–æ—Ä–∏—è—Ö –∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞—Ö –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n\nüçΩÔ∏è **–ë–ª—é–¥–æ**: [–Ω–∞–∑–≤–∞–Ω–∏–µ]\nüìä **–ö–∞–ª–æ—Ä–∏–∏**: [–ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –ø–æ—Ä—Ü–∏—é]\nü•ó **–û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã**: [—Å–ø–∏—Å–æ–∫]\nüí™ **–ë–µ–ª–∫–∏**: [–≥—Ä–∞–º–º—ã]\nüçû **–£–≥–ª–µ–≤–æ–¥—ã**: [–≥—Ä–∞–º–º—ã]\nü•ë **–ñ–∏—Ä—ã**: [–≥—Ä–∞–º–º—ã]\nüßÇ **–ü–æ–ª–µ–∑–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞**: [–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ]\n‚ö†Ô∏è **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**: [–µ—Å–ª–∏ –µ—Å—Ç—å]"
                            },
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/jpeg;base64,{image_data}"
                                }
                            }
                        ]
                    }
                ],
                "max_tokens": 1000,
                "temperature": 0.1
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Langdock
            response = requests.post(
                'https://api.langdock.com/v1/chat/completions',
                headers=headers,
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                analysis = result['choices'][0]['message']['content']
                
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.send_header('Access-Control-Allow-Origin', '*')
                self.send_header('Access-Control-Allow-Methods', 'POST, GET, OPTIONS')
                self.send_header('Access-Control-Allow-Headers', 'Content-Type')
                self.end_headers()
                
                response_data = {
                    'success': True,
                    'analysis': analysis,
                    'model': 'langdock-gpt-4-vision',
                    'timestamp': int(__import__('time').time())
                }
                self.wfile.write(json.dumps(response_data, ensure_ascii=False).encode('utf-8'))
            else:
                self.send_error(500, f"Langdock API error: {response.status_code}")
                
        except Exception as e:
            self.send_error(500, f"Internal server error: {str(e)}")
    
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.end_headers()
        
        response_data = {
            'service': 'Langdock Photo Analysis API',
            'status': 'running',
            'version': '1.0.0',
            'model': 'gpt-4-vision-preview'
        }
        self.wfile.write(json.dumps(response_data, ensure_ascii=False).encode('utf-8'))
    
    def do_OPTIONS(self):
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'POST, GET, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
