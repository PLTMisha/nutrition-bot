#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Nutrition Bot
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
"""

import os
import sys
import subprocess
import json
from pathlib import Path
from typing import Dict, Optional

class NutritionBotSetup:
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.env_file = self.project_root / ".env"
        self.config = {}
        
    def print_header(self):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        print("=" * 60)
        print("üçé NUTRITION BOT - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê")
        print("=" * 60)
        print()
        
    def print_step(self, step: int, title: str):
        """–ü–µ—á–∞—Ç—å —à–∞–≥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        print(f"\nüìã –®–∞–≥ {step}: {title}")
        print("-" * 40)
        
    def get_user_input(self, prompt: str, required: bool = True) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        while True:
            value = input(f"‚û§ {prompt}: ").strip()
            if value or not required:
                return value if value else None
            print("‚ùå –≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!")
            
    def check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        self.print_step(1, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ)
        core_dependencies = {
            "python": "python --version",
            "pip": "pip --version",
            "git": "git --version"
        }
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–¥–ª—è Vercel)
        optional_dependencies = {
            "node": "node --version",
            "npm": "npm --version"
        }
        
        missing_core = []
        missing_optional = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        for name, command in core_dependencies.items():
            try:
                result = subprocess.run(command.split(), capture_output=True, text=True)
                if result.returncode == 0:
                    version = result.stdout.strip().split('\n')[0]
                    print(f"‚úÖ {name}: {version}")
                else:
                    missing_core.append(name)
            except FileNotFoundError:
                missing_core.append(name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        for name, command in optional_dependencies.items():
            try:
                result = subprocess.run(command.split(), capture_output=True, text=True)
                if result.returncode == 0:
                    version = result.stdout.strip().split('\n')[0]
                    print(f"‚úÖ {name}: {version}")
                else:
                    missing_optional.append(name)
            except FileNotFoundError:
                missing_optional.append(name)
        
        # –ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        if missing_core:
            print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing_core)}")
            print("\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º:")
            for dep in missing_core:
                if dep == "python":
                    print("- Python 3.9+: https://python.org/downloads/")
                elif dep == "git":
                    print("- Git: https://git-scm.com/downloads")
            return False
        
        # –ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
        if missing_optional:
            print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing_optional)}")
            print("–≠—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ - Vercel —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–∂–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –ø–æ–∑–∂–µ")
            if "npm" in missing_optional:
                print("\nüí° –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ npm:")
                print("1. –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js —Å https://nodejs.org/")
                print("2. –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ npm –≤ PATH –≤—Ä—É—á–Ω—É—é")
                print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É")
            self.has_npm = False
        else:
            self.has_npm = True
            
        return True
        
    def setup_telegram_bot(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞"""
        self.print_step(2, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞")
        
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ @BotFather")
        print("2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: /newbot")
        print("3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞")
        print("4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
        print()
        
        token = self.get_user_input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞")
        self.config["TELEGRAM_BOT_TOKEN"] = token
        
        print("‚úÖ Telegram –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
    def setup_database(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.print_step(3, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Neon PostgreSQL")
        
        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://neon.tech")
        print("2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ GitHub")
        print("3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç 'nutrition-bot'")
        print("4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        print()
        
        db_url = self.get_user_input("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        self.config["NEON_DATABASE_URL"] = db_url
        
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        
    def setup_openai(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI API"""
        self.print_step(4, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI API")
        
        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://platform.openai.com/api-keys")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π API –∫–ª—é—á")
        print("3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á")
        print()
        
        api_key = self.get_user_input("–í–≤–µ–¥–∏—Ç–µ OpenAI API –∫–ª—é—á")
        self.config["OPENAI_API_KEY"] = api_key
        
        print("‚úÖ OpenAI API –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
    def setup_vercel(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Vercel"""
        self.print_step(5, "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Vercel —Ñ—É–Ω–∫—Ü–∏–π")
        
        if not hasattr(self, 'has_npm') or not self.has_npm:
            print("‚ùå npm –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Vercel —Ñ—É–Ω–∫—Ü–∏–π –Ω—É–∂–µ–Ω npm.")
            print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:")
            print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js —Å npm: https://nodejs.org/")
            print("2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É")
            print("3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã:")
            print("   npm install -g vercel")
            print("   cd vercel")
            print("   vercel login")
            print("   vercel --prod")
            print("\n‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Vercel")
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Vercel CLI
            subprocess.run(["vercel", "--version"], capture_output=True, check=True)
            print("‚úÖ Vercel CLI —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Vercel CLI...")
            try:
                subprocess.run(["npm", "install", "-g", "vercel"], check=True)
                print("‚úÖ Vercel CLI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.CalledProcessError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Vercel CLI: {e}")
                return
            
        print("\n1. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç Vercel:")
        try:
            subprocess.run(["vercel", "login"], check=True)
        except subprocess.CalledProcessError:
            print("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ Vercel")
            return
        
        print("\n2. –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏...")
        vercel_dir = self.project_root / "vercel"
        original_dir = os.getcwd()
        
        try:
            os.chdir(vercel_dir)
            result = subprocess.run(["vercel", "--prod"], capture_output=True, text=True)
            
            if result.returncode == 0:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ –≤—ã–≤–æ–¥–∞
                lines = result.stdout.split('\n')
                for line in lines:
                    if 'https://' in line and 'vercel.app' in line:
                        vercel_url = line.strip()
                        self.config["VERCEL_API_URL"] = vercel_url
                        print(f"‚úÖ Vercel —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã: {vercel_url}")
                        break
                else:
                    print("‚ö†Ô∏è Vercel —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç, –Ω–æ URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤—ã–≤–æ–¥–µ")
                    print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –≤ –ø–∞–Ω–µ–ª–∏ Vercel")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Vercel —Ñ—É–Ω–∫—Ü–∏–π")
                print("STDOUT:", result.stdout)
                print("STDERR:", result.stderr)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏: {e}")
        finally:
            os.chdir(original_dir)
        
    def create_env_file(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞"""
        self.print_step(6, "–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞")
        
        env_content = f"""# Telegram Bot Configuration
TELEGRAM_BOT_TOKEN={self.config.get('TELEGRAM_BOT_TOKEN', '')}

# Database Configuration
NEON_DATABASE_URL={self.config.get('NEON_DATABASE_URL', '')}

# External APIs
OPENAI_API_KEY={self.config.get('OPENAI_API_KEY', '')}
VERCEL_API_URL={self.config.get('VERCEL_API_URL', '')}

# Environment Settings
RAILWAY_ENVIRONMENT=development
PORT=8000
LOG_LEVEL=INFO

# Optional Services
REDIS_URL=
SENTRY_DSN=
"""
        
        with open(self.env_file, 'w', encoding='utf-8') as f:
            f.write(env_content)
            
        print(f"‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω: {self.env_file}")
        
    def install_dependencies(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        self.print_step(7, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        
        print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Python –ø–∞–∫–µ—Ç—ã...")
        subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"], check=True)
        
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
    def test_local_setup(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.print_step(8, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            from config.database import init_database, create_tables
            import asyncio
            
            async def test_db():
                await init_database()
                await create_tables()
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
                
            asyncio.run(test_db())
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            
    def setup_railway_instructions(self):
        """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Railway"""
        self.print_step(9, "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ Railway")
        
        print("–î–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ Railway –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print()
        print("1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–¥ –≤ GitHub:")
        print("   git init")
        print("   git add .")
        print("   git commit -m 'Initial commit'")
        print("   git remote add origin https://github.com/username/nutrition-bot.git")
        print("   git push -u origin main")
        print()
        print("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://railway.app")
        print("3. Deploy from GitHub repo")
        print("4. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞")
        print()
        
    def setup_monitoring_instructions(self):
        """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.print_step(10, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        
        print("–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
        print()
        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://uptimerobot.com")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç")
        print("3. Add Monitor ‚Üí HTTP(s)")
        print("4. URL: https://your-app.up.railway.app/health")
        print("5. Monitoring Interval: 5 minutes")
        print()
        
    def print_summary(self):
        """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤"""
        print("\n" + "=" * 60)
        print("üéâ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("=" * 60)
        print()
        print("üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        print(f"   - {self.env_file}")
        print()
        print("üöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ:")
        print("   python main.py")
        print()
        print("üìñ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
        print("   - DEPLOYMENT_GUIDE.md - –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ")
        print("   - QUICK_START.md - –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç")
        print("   - README.md - –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
        print()
        print("üÜò –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?")
        print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ health check: curl http://localhost:8000/health")
        print("   - –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏")
        print("   - –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
        print()
        
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            self.print_header()
            
            if not self.check_dependencies():
                return False
                
            self.setup_telegram_bot()
            self.setup_database()
            self.setup_openai()
            
            # Vercel setup (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            if hasattr(self, 'has_npm') and self.has_npm:
                setup_vercel = input("\n‚ùì –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å Vercel —Ñ—É–Ω–∫—Ü–∏–∏ —Å–µ–π—á–∞—Å? (y/n): ").lower() == 'y'
                if setup_vercel:
                    self.setup_vercel()
                else:
                    print("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Vercel (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∑–∂–µ)")
            else:
                print("\n‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Vercel (npm –Ω–µ –Ω–∞–π–¥–µ–Ω)")
                print("üìã –î–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –ø–æ–∑–∂–µ:")
                print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js —Å npm")
                print("2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: npm install -g vercel")
                print("3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–ø–∫—É vercel –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: vercel --prod")
                
            self.create_env_file()
            self.install_dependencies()
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            test_setup = input("\n‚ùì –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É? (y/n): ").lower() == 'y'
            if test_setup:
                self.test_local_setup()
                
            self.setup_railway_instructions()
            self.setup_monitoring_instructions()
            self.print_summary()
            
            return True
            
        except KeyboardInterrupt:
            print("\n\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        except Exception as e:
            print(f"\n\n‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            return False


if __name__ == "__main__":
    setup = NutritionBotSetup()
    success = setup.run()
    sys.exit(0 if success else 1)
