"""
Helper functions for the Nutrition Bot
"""
import re
import logging
from datetime import datetime, date, timedelta
from typing import Dict, Any, List, Optional, Tuple
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from io import BytesIO

from utils.i18n import get_text, Language

logger = logging.getLogger(__name__)


def format_nutrition_summary(nutrition_data: Dict[str, float], language: Language = Language.EN) -> str:
    """Format nutrition data for display"""
    calories = nutrition_data.get('calories', 0)
    proteins = nutrition_data.get('proteins', 0)
    fats = nutrition_data.get('fats', 0)
    carbs = nutrition_data.get('carbs', 0)
    
    return get_text("nutrition_summary", language).format(
        calories=calories,
        proteins=proteins,
        fats=fats,
        carbs=carbs
    )


def format_user_stats(user, today_stats: Dict[str, float], week_stats: Dict[str, float], language: Language = Language.EN) -> str:
    """Format user statistics for display"""
    today_calories = today_stats.get('calories', 0)
    today_entries = today_stats.get('entries_count', 0)
    
    week_calories = week_stats.get('calories', 0)
    week_entries = week_stats.get('entries_count', 0)
    week_days = week_stats.get('days', 7)
    
    # Calculate progress towards daily goal
    goal_calories = user.daily_goal_calories
    progress_percent = (today_calories / goal_calories * 100) if goal_calories > 0 else 0
    remaining_calories = max(0, goal_calories - today_calories)
    
    # Progress bar
    progress_bar = create_progress_bar(progress_percent)
    
    # Average daily calories for the week
    avg_daily_calories = week_calories / week_days if week_days > 0 else 0
    
    stats_text = get_text("stats_message", language).format(
        name=user.display_name,
        goal_calories=goal_calories,
        progress_bar=progress_bar,
        progress_percent=progress_percent,
        today_calories=today_calories,
        today_entries=today_entries,
        remaining_calories=remaining_calories,
        week_calories=week_calories,
        avg_daily_calories=avg_daily_calories,
        week_entries=week_entries,
        nutrition_summary=format_nutrition_summary(today_stats, language)
    )
    
    return stats_text.strip()


def create_progress_bar(percent: float, length: int = 10) -> str:
    """Create a visual progress bar"""
    filled = int(percent / 100 * length)
    bar = "üü©" * filled + "‚¨ú" * (length - filled)
    return bar


def parse_food_query(text: str) -> Tuple[Optional[str], Optional[float]]:
    """Parse food query to extract product name and quantity"""
    # Remove common words and normalize
    text = text.strip().lower()
    
    # Patterns to match quantity
    quantity_patterns = [
        r'(\d+(?:\.\d+)?)\s*–≥(?:—Ä–∞–º–º)?',  # 100–≥, 100 –≥—Ä–∞–º–º
        r'(\d+(?:\.\d+)?)\s*–º–ª',          # 200–º–ª
        r'(\d+(?:\.\d+)?)\s*—à—Ç',          # 1—à—Ç
        r'(\d+(?:\.\d+)?)\s*—à—Ç—É–∫',        # 2 —à—Ç—É–∫–∏
        r'(\d+(?:\.\d+)?)\s*–∫–≥',          # 0.5–∫–≥
        r'(\d+(?:\.\d+)?)\s*–ª',           # 1–ª
        r'(\d+(?:\.\d+)?)\s*—Å—Ç–∞–∫–∞–Ω',      # 1 —Å—Ç–∞–∫–∞–Ω
        r'(\d+(?:\.\d+)?)\s*–ª–æ–∂–∫',        # 2 –ª–æ–∂–∫–∏
        r'(\d+(?:\.\d+)?)\s*—á–∞—à–∫',        # 1 —á–∞—à–∫–∞
        r'(\d+(?:\.\d+)?)\s*–ø–æ—Ä—Ü–∏',       # 1 –ø–æ—Ä—Ü–∏—è
    ]
    
    quantity = None
    product_name = text
    
    # Try to find quantity
    for pattern in quantity_patterns:
        match = re.search(pattern, text)
        if match:
            quantity = float(match.group(1))
            
            # Convert units to grams
            if '–∫–≥' in match.group(0):
                quantity *= 1000
            elif '–ª' in match.group(0):
                quantity *= 1000  # Assume 1–ª = 1000–≥ for liquids
            elif '—Å—Ç–∞–∫–∞–Ω' in match.group(0):
                quantity *= 200   # Standard glass ~200ml
            elif '–ª–æ–∂–∫' in match.group(0):
                quantity *= 15    # Tablespoon ~15–≥
            elif '—á–∞—à–∫' in match.group(0):
                quantity *= 250   # Cup ~250ml
            elif '–ø–æ—Ä—Ü–∏' in match.group(0):
                quantity *= 100   # Average portion ~100–≥
            elif '—à—Ç' in match.group(0):
                quantity *= 100   # Default weight per piece
            
            # Remove quantity from product name
            product_name = re.sub(pattern, '', text).strip()
            break
    
    # Clean up product name
    product_name = re.sub(r'\s+', ' ', product_name).strip()
    
    # Remove common prefixes/suffixes
    cleanup_words = ['–Ω–∞–π—Ç–∏', '–ø–æ–∏—Å–∫', '–¥–æ–±–∞–≤–∏—Ç—å', '—Å–∫–æ–ª—å–∫–æ', '–≤', '–Ω–∞', '–∏–∑', '–¥–ª—è']
    words = product_name.split()
    words = [word for word in words if word not in cleanup_words]
    product_name = ' '.join(words)
    
    if not product_name:
        return None, quantity
    
    return product_name, quantity


def format_product_info(product: Dict[str, Any], quantity: float = 100) -> str:
    """Format product information for display"""
    name = product.get('name', 'Unknown Product')
    brand = product.get('brand', '')
    
    # Nutrition per specified quantity
    multiplier = quantity / 100.0
    calories = product.get('calories_per_100g', 0) * multiplier
    proteins = product.get('proteins_per_100g', 0) * multiplier
    fats = product.get('fats_per_100g', 0) * multiplier
    carbs = product.get('carbs_per_100g', 0) * multiplier
    
    # Additional nutrition if available
    fiber = product.get('fiber_per_100g')
    sugar = product.get('sugar_per_100g')
    sodium = product.get('sodium_per_100g')
    
    info_text = f"üçΩÔ∏è <b>{name}</b>\n"
    
    if brand:
        info_text += f"üè∑Ô∏è <b>–ë—Ä–µ–Ω–¥:</b> {brand}\n"
    
    info_text += f"‚öñÔ∏è <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity}–≥\n\n"
    info_text += format_nutrition_summary({
        'calories': calories,
        'proteins': proteins,
        'fats': fats,
        'carbs': carbs
    })
    
    # Add additional nutrition if available
    additional_info = []
    if fiber is not None:
        additional_info.append(f"üåæ –ö–ª–µ—Ç—á–∞—Ç–∫–∞: {fiber * multiplier:.1f}–≥")
    if sugar is not None:
        additional_info.append(f"üçØ –°–∞—Ö–∞—Ä: {sugar * multiplier:.1f}–≥")
    if sodium is not None:
        additional_info.append(f"üßÇ –ù–∞—Ç—Ä–∏–π: {sodium * multiplier:.1f}–º–≥")
    
    if additional_info:
        info_text += "\n\n" + "\n".join(additional_info)
    
    return info_text


def calculate_daily_progress(current: float, goal: float) -> Dict[str, Any]:
    """Calculate daily progress statistics"""
    if goal <= 0:
        return {
            'percent': 0,
            'remaining': 0,
            'status': 'no_goal',
            'message': '–¶–µ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'
        }
    
    percent = (current / goal) * 100
    remaining = goal - current
    
    if percent < 50:
        status = 'low'
        message = f'–û—Å—Ç–∞–ª–æ—Å—å {remaining:.0f} –∫–∫–∞–ª –¥–æ —Ü–µ–ª–∏'
    elif percent < 90:
        status = 'good'
        message = f'–•–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –û—Å—Ç–∞–ª–æ—Å—å {remaining:.0f} –∫–∫–∞–ª'
    elif percent <= 110:
        status = 'excellent'
        message = '–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞'
    else:
        status = 'over'
        message = f'–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –Ω–∞ {abs(remaining):.0f} –∫–∫–∞–ª'
    
    return {
        'percent': percent,
        'remaining': remaining,
        'status': status,
        'message': message
    }


def generate_nutrition_chart(data: List[Dict[str, Any]], period: str = 'week') -> BytesIO:
    """Generate nutrition chart"""
    try:
        # Set up the plot
        plt.style.use('default')
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 8))
        fig.suptitle(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ {period}', fontsize=16, fontweight='bold')
        
        # Extract data
        dates = [item['date'] for item in data]
        calories = [item['calories'] for item in data]
        proteins = [item['proteins'] for item in data]
        fats = [item['fats'] for item in data]
        carbs = [item['carbs'] for item in data]
        
        # Plot calories
        ax1.plot(dates, calories, marker='o', linewidth=2, markersize=6, color='#FF6B6B')
        ax1.set_title('–ö–∞–ª–æ—Ä–∏–∏', fontweight='bold')
        ax1.set_ylabel('–∫–∫–∞–ª')
        ax1.grid(True, alpha=0.3)
        ax1.tick_params(axis='x', rotation=45)
        
        # Plot macronutrients
        ax2.plot(dates, proteins, marker='s', label='–ë–µ–ª–∫–∏', linewidth=2, color='#4ECDC4')
        ax2.plot(dates, fats, marker='^', label='–ñ–∏—Ä—ã', linewidth=2, color='#45B7D1')
        ax2.plot(dates, carbs, marker='D', label='–£–≥–ª–µ–≤–æ–¥—ã', linewidth=2, color='#96CEB4')
        
        ax2.set_title('–ú–∞–∫—Ä–æ–Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã', fontweight='bold')
        ax2.set_ylabel('–≥—Ä–∞–º–º—ã')
        ax2.legend()
        ax2.grid(True, alpha=0.3)
        ax2.tick_params(axis='x', rotation=45)
        
        # Format dates on x-axis
        if len(dates) > 0:
            ax1.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
            ax2.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
        
        plt.tight_layout()
        
        # Save to BytesIO
        buffer = BytesIO()
        plt.savefig(buffer, format='png', dpi=150, bbox_inches='tight')
        buffer.seek(0)
        plt.close()
        
        return buffer
        
    except Exception as e:
        logger.error(f"Error generating chart: {e}")
        return None


def format_barcode_result(barcode_data: Dict[str, Any]) -> str:
    """Format barcode scan result for display"""
    barcode = barcode_data.get('barcode', 'Unknown')
    found_in_db = barcode_data.get('found_in_database', False)
    
    result_text = f"üì± <b>–®—Ç—Ä–∏—Ö-–∫–æ–¥:</b> {barcode}\n\n"
    
    if found_in_db and 'product' in barcode_data:
        product = barcode_data['product']
        result_text += format_product_info(product, 100)
        result_text += "\n\nüí° <i>–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ë–ñ–£</i>"
    else:
        result_text += (
            "‚ùå <b>–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
            "‚Ä¢ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –∫–æ–¥–∞\n"
            "‚Ä¢ –†—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö"
        )
    
    return result_text


def format_time_ago(dt: datetime) -> str:
    """Format time difference in human-readable format"""
    now = datetime.utcnow()
    diff = now - dt
    
    if diff.days > 0:
        return f"{diff.days} –¥–Ω. –Ω–∞–∑–∞–¥"
    elif diff.seconds > 3600:
        hours = diff.seconds // 3600
        return f"{hours} —á. –Ω–∞–∑–∞–¥"
    elif diff.seconds > 60:
        minutes = diff.seconds // 60
        return f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
    else:
        return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"


def truncate_text(text: str, max_length: int = 50) -> str:
    """Truncate text to specified length"""
    if len(text) <= max_length:
        return text
    return text[:max_length-3] + "..."


def clean_product_name(name: str) -> str:
    """Clean and normalize product name"""
    # Remove extra whitespace
    name = re.sub(r'\s+', ' ', name.strip())
    
    # Remove special characters but keep letters, numbers, and basic punctuation
    name = re.sub(r'[^\w\s\-\.,]', '', name)
    
    # Capitalize first letter
    name = name.capitalize()
    
    return name


def validate_quantity(quantity_str: str) -> Tuple[bool, Optional[float], str]:
    """Validate and parse quantity input"""
    try:
        # Remove common suffixes
        quantity_str = re.sub(r'[^\d\.]', '', quantity_str.strip())
        
        if not quantity_str:
            return False, None, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        
        quantity = float(quantity_str)
        
        if quantity <= 0:
            return False, None, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è"
        
        if quantity > 5000:  # 5kg limit
            return False, None, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (–º–∞–∫—Å–∏–º—É–º 5000–≥)"
        
        return True, quantity, "OK"
        
    except ValueError:
        return False, None, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"


def format_meal_type(meal_type: Optional[str]) -> str:
    """Format meal type for display"""
    meal_types = {
        'breakfast': 'üåÖ –ó–∞–≤—Ç—Ä–∞–∫',
        'lunch': 'üåû –û–±–µ–¥',
        'dinner': 'üåÜ –£–∂–∏–Ω',
        'snack': 'üçø –ü–µ—Ä–µ–∫—É—Å'
    }
    return meal_types.get(meal_type, 'üçΩÔ∏è –ü—Ä–∏–µ–º –ø–∏—â–∏')


def calculate_bmi(weight_kg: float, height_cm: float) -> Tuple[float, str]:
    """Calculate BMI and category"""
    height_m = height_cm / 100
    bmi = weight_kg / (height_m ** 2)
    
    if bmi < 18.5:
        category = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –≤–µ—Å"
    elif bmi < 25:
        category = "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–µ—Å"
    elif bmi < 30:
        category = "–ò–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å"
    else:
        category = "–û–∂–∏—Ä–µ–Ω–∏–µ"
    
    return round(bmi, 1), category


def estimate_daily_calories(weight_kg: float, height_cm: float, age: int, gender: str, activity_level: str) -> int:
    """Estimate daily calorie needs using Mifflin-St Jeor equation"""
    # Base metabolic rate
    if gender.lower() == 'male':
        bmr = 10 * weight_kg + 6.25 * height_cm - 5 * age + 5
    else:
        bmr = 10 * weight_kg + 6.25 * height_cm - 5 * age - 161
    
    # Activity multipliers
    activity_multipliers = {
        'sedentary': 1.2,      # Little/no exercise
        'light': 1.375,        # Light exercise 1-3 days/week
        'moderate': 1.55,      # Moderate exercise 3-5 days/week
        'active': 1.725,       # Heavy exercise 6-7 days/week
        'very_active': 1.9     # Very heavy exercise, physical job
    }
    
    multiplier = activity_multipliers.get(activity_level, 1.55)
    daily_calories = bmr * multiplier
    
    return int(daily_calories)


def generate_meal_suggestions(target_calories: int, meal_type: str) -> List[str]:
    """Generate meal suggestions based on target calories and meal type"""
    suggestions = {
        'breakfast': [
            "–û–≤—Å—è–Ω–∫–∞ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏ –∏ –æ—Ä–µ—Ö–∞–º–∏",
            "–Ø–∏—á–Ω–∏—Ü–∞ —Å –æ–≤–æ—â–∞–º–∏ –∏ —Ö–ª–µ–±–æ–º",
            "–¢–≤–æ—Ä–æ–≥ —Å —è–≥–æ–¥–∞–º–∏ –∏ –º–µ–¥–æ–º",
            "–°–º—É–∑–∏ —Å –±–∞–Ω–∞–Ω–æ–º –∏ –ø—Ä–æ—Ç–µ–∏–Ω–æ–º",
            "–ú—é—Å–ª–∏ —Å –º–æ–ª–æ–∫–æ–º –∏ —Ñ—Ä—É–∫—Ç–∞–º–∏"
        ],
        'lunch': [
            "–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å —Ä–∏—Å–æ–º –∏ –æ–≤–æ—â–∞–º–∏",
            "–†—ã–±–∞ —Å –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º –∏ —Å–∞–ª–∞—Ç–æ–º",
            "–ü–∞—Å—Ç–∞ —Å —Ç–æ–º–∞—Ç–Ω—ã–º —Å–æ—É—Å–æ–º –∏ —Å—ã—Ä–æ–º",
            "–°—É–ø —Å –º—è—Å–æ–º –∏ —Ö–ª–µ–±–æ–º",
            "–°–∞–ª–∞—Ç —Å –∫—É—Ä–∏—Ü–µ–π –∏ –∞–≤–æ–∫–∞–¥–æ"
        ],
        'dinner': [
            "–ó–∞–ø–µ—á–µ–Ω–Ω–∞—è —Ä—ã–±–∞ —Å –æ–≤–æ—â–∞–º–∏",
            "–ö—É—Ä–∏–Ω–æ–µ —Ñ–∏–ª–µ —Å —Å–∞–ª–∞—Ç–æ–º",
            "–û–º–ª–µ—Ç —Å –æ–≤–æ—â–∞–º–∏",
            "–¢–≤–æ—Ä–æ–∂–Ω–∞—è –∑–∞–ø–µ–∫–∞–Ω–∫–∞",
            "–õ–µ–≥–∫–∏–π —Å—É–ø —Å –∑–µ–ª–µ–Ω—å—é"
        ],
        'snack': [
            "–Ø–±–ª–æ–∫–æ —Å –æ—Ä–µ—Ö–∞–º–∏",
            "–ô–æ–≥—É—Ä—Ç —Å —è–≥–æ–¥–∞–º–∏",
            "–ú–æ—Ä–∫–æ–≤—å —Å —Ö—É–º—É—Å–æ–º",
            "–ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π –±–∞—Ç–æ–Ω—á–∏–∫",
            "–ì–æ—Ä—Å—Ç—å –æ—Ä–µ—Ö–æ–≤"
        ]
    }
    
    return suggestions.get(meal_type, suggestions['snack'])


def format_error_message(error_type: str, details: str = "") -> str:
    """Format error messages for users"""
    error_messages = {
        'network': "üåê –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        'api_limit': "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
        'invalid_image': "üì∑ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.",
        'no_barcode': "üì± –®—Ç—Ä–∏—Ö-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.",
        'product_not_found': "üîç –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
        'invalid_quantity': "‚öñÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è.",
        'database_error': "üíæ –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        'general': "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    }
    
    message = error_messages.get(error_type, error_messages['general'])
    
    if details:
        message += f"\n\n<i>–î–µ—Ç–∞–ª–∏: {details}</i>"
    
    return message
